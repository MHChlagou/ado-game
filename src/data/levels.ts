import type { Level, Badge } from '../types/game';

// Badges configuration
export const BADGES: Badge[] = [
  {
    id: 'db-master',
    name: 'DB Master',
    description: 'Successfully installed and configured MySQL server',
    icon: 'üóÑÔ∏è',
    earned: false,
  },
  {
    id: 'devops-architect',
    name: 'DevOps Architect',
    description: 'Completed Azure DevOps Server installation',
    icon: 'üèóÔ∏è',
    earned: false,
  },
  {
    id: 'security-guardian',
    name: 'Security Guardian',
    description: 'Mastered global permissions configuration',
    icon: 'üõ°Ô∏è',
    earned: false,
  },
  {
    id: 'service-expert',
    name: 'Service Expert',
    description: 'Configured all Azure DevOps service permissions',
    icon: '‚öôÔ∏è',
    earned: false,
  },
  {
    id: 'project-hero',
    name: 'Project Hero',
    description: 'Successfully completed the final challenge',
    icon: 'üèÜ',
    earned: false,
  },
];

// Levels configuration
export const LEVELS: Level[] = [
  {
    id: 1,
    title: 'MySQL Server Installation',
    description: 'Learn to install and configure MySQL server as the foundation for Azure DevOps Server',
    icon: 'üóÑÔ∏è',
    difficulty: 'easy',
    estimatedTime: 15,
    prerequisites: [],
    badge: BADGES[0],
    challenges: [
      {
        id: 'mysql-quiz-1',
        type: 'quiz',
        title: 'MySQL Basics',
        description: 'Test your knowledge of MySQL fundamentals',
        points: 100,
        data: {
          question: 'What is the default port for MySQL server?',
          options: ['3306', '3307', '5432', '1433'],
          correctAnswer: 0,
          explanation: 'MySQL server uses port 3306 by default. This is important for firewall configuration and connection strings.',
        },
      },
      {
        id: 'mysql-drag-drop-1',
        type: 'drag-drop',
        title: 'Installation Steps',
        description: 'Arrange the MySQL installation steps in the correct order',
        points: 150,
        data: {
          instruction: 'Drag the installation steps into the correct order:',
          items: [
            { id: 'download', content: 'Download MySQL Installer', type: 'step' },
            { id: 'run', content: 'Run the installer as administrator', type: 'step' },
            { id: 'choose', content: 'Choose installation type', type: 'step' },
            { id: 'configure', content: 'Configure server settings', type: 'step' },
            { id: 'test', content: 'Test the connection', type: 'step' },
          ],
          dropZones: [
            { id: 'step-1', label: 'Step 1', acceptedTypes: ['step'] },
            { id: 'step-2', label: 'Step 2', acceptedTypes: ['step'] },
            { id: 'step-3', label: 'Step 3', acceptedTypes: ['step'] },
            { id: 'step-4', label: 'Step 4', acceptedTypes: ['step'] },
            { id: 'step-5', label: 'Step 5', acceptedTypes: ['step'] },
          ],
          correctMappings: {
            'download': 'step-1',
            'run': 'step-2',
            'choose': 'step-3',
            'configure': 'step-4',
            'test': 'step-5',
          },
        },
      },
      {
        id: 'mysql-terminal-1',
        type: 'terminal',
        title: 'MySQL Configuration',
        description: 'Configure MySQL server using command line',
        points: 200,
        data: {
          instruction: 'Execute the commands to configure MySQL for Azure DevOps Server:',
          expectedCommands: [
            'mysql -u root -p',
            'CREATE DATABASE AzureDevOpsServer_Configuration;',
            'CREATE DATABASE AzureDevOpsServer_DefaultCollection;',
            'SHOW DATABASES;',
          ],
          hints: [
            'Start by connecting to MySQL as root user',
            'Create the configuration database first',
            'Then create the default collection database',
            'Verify databases were created successfully',
          ],
          simulatedOutput: {
            'mysql -u root -p': 'Enter password: \nWelcome to the MySQL monitor.\nmysql>',
            'CREATE DATABASE AzureDevOpsServer_Configuration;': 'Query OK, 1 row affected (0.01 sec)',
            'CREATE DATABASE AzureDevOpsServer_DefaultCollection;': 'Query OK, 1 row affected (0.01 sec)',
            'SHOW DATABASES;': '+------------------------------------+\n| Database                           |\n+------------------------------------+\n| AzureDevOpsServer_Configuration    |\n| AzureDevOpsServer_DefaultCollection|\n| information_schema                 |\n| mysql                              |\n| performance_schema                 |\n| sys                                |\n+------------------------------------+',
          },
        },
      },
      {
        id: 'ado-db-quiz-1',
        type: 'quiz',
        title: 'Database Compatibility',
        description: 'Test your knowledge about supported databases for Azure DevOps Server',
        points: 100,
        data: {
          question: 'Which database engines are officially supported by Azure DevOps Server?',
          options: [
            'MySQL and PostgreSQL',
            'SQL Server only',
            'SQL Server and Azure SQL Managed Instance',
            'Oracle DB and SQL Server'
          ],
          correctAnswer: 2,
          explanation: 'Azure DevOps Server only supports Microsoft SQL Server (on-premises) and Azure SQL Managed Instance. MySQL is not supported.',
        },
      },
    ],
  },
  {
    id: 2,
    title: 'Azure DevOps Server Installation',
    description: 'Install and configure Azure DevOps Server with all prerequisites',
    icon: 'üèóÔ∏è',
    difficulty: 'medium',
    estimatedTime: 25,
    prerequisites: [1],
    badge: BADGES[1],
    challenges: [
      {
        id: 'ado-quiz-1',
        type: 'quiz',
        title: 'Prerequisites Knowledge',
        description: 'Identify the required prerequisites for Azure DevOps Server',
        points: 100,
        data: {
          question: 'Which of the following is NOT a prerequisite for Azure DevOps Server?',
          options: ['IIS (Internet Information Services)', 'SQL Server or MySQL', 'Visual Studio IDE', '.NET Framework'],
          correctAnswer: 2,
          explanation: 'Visual Studio IDE is not required for Azure DevOps Server installation. IIS, SQL Server/MySQL, and .NET Framework are essential prerequisites.',
        },
      },
      {
        id: 'ado-ssl-quiz-1',
        type: 'quiz',
        title: 'SSL Certificate Management',
        description: 'Learn how to update SSL certificates for Azure DevOps Server',
        points: 100,
        data: {
          question: 'How can you replace the SSL certificate used by Azure DevOps Server?',
          options: [
            'Directly from the Azure DevOps Server Administration Console',
            'By running TFSConfig.exe with /ssl switch',
            'Through IIS Manager by updating site bindings',
            'By modifying the web.config file manually'
          ],
          correctAnswer: 2,
          explanation: 'Azure DevOps Server runs on IIS. To replace the SSL certificate, open IIS Manager, edit site bindings for the TFS site, and select the new certificate.',
        },
      },
      {
        id: 'ado-sql-modules-quiz-1',
        type: 'quiz',
        title: 'SQL Server Requirements',
        description: 'Identify the SQL Server components required for Azure DevOps Server',
        points: 100,
        data: {
          question: 'Which SQL Server components are required for Azure DevOps Server to function properly?',
          options: [
            'Database Engine and Full-Text Search',
            'Database Engine only',
            'Analysis Services and Reporting Services',
            'Reporting Services only'
          ],
          correctAnswer: 0,
          explanation: 'Azure DevOps Server requires the SQL Server Database Engine to store its databases and Full-Text Search for features like code search. Analysis Services and Reporting Services are optional and only needed if you enable reporting features.',
        },
      },
      {
        id: 'ado-drag-drop-1',
        type: 'drag-drop',
        title: 'Service Dependencies',
        description: 'Match each service with its role in Azure DevOps Server',
        points: 150,
        data: {
          instruction: 'Match each service to its correct role:',
          items: [
            { id: 'iis', content: 'IIS', type: 'service' },
            { id: 'sql', content: 'SQL Server/MySQL', type: 'service' },
            { id: 'dotnet', content: '.NET Framework', type: 'service' },
            { id: 'search', content: 'Search Service', type: 'service' },
          ],
          dropZones: [
            { id: 'web-server', label: 'Web Server', acceptedTypes: ['service'] },
            { id: 'database', label: 'Database Engine', acceptedTypes: ['service'] },
            { id: 'runtime', label: 'Application Runtime', acceptedTypes: ['service'] },
            { id: 'indexing', label: 'Code Indexing', acceptedTypes: ['service'] },
          ],
          correctMappings: {
            'iis': 'web-server',
            'sql': 'database',
            'dotnet': 'runtime',
            'search': 'indexing',
          },
        },
      },
      {
        id: 'ado-terminal-1',
        type: 'terminal',
        title: 'TFSConfig Commands',
        description: 'Use TFSConfig to configure Azure DevOps Server',
        points: 200,
        data: {
          instruction: 'Execute TFSConfig commands to complete the server configuration:',
          expectedCommands: [
            'TFSConfig.exe RegisterDB /sqlInstance:localhost /databaseName:AzureDevOpsServer_Configuration',
            'TFSConfig.exe CreateTeamProjectCollection /name:DefaultCollection /dbname:AzureDevOpsServer_DefaultCollection',
            'TFSConfig.exe Accounts /add /accountType:ApplicationTier /account:"NT AUTHORITY\\NETWORK SERVICE"',
          ],
          hints: [
            'First register the configuration database',
            'Create the default team project collection',
            'Add the network service account for the application tier',
          ],
          simulatedOutput: {
            'TFSConfig.exe RegisterDB /sqlInstance:localhost /databaseName:AzureDevOpsServer_Configuration': 'Registering database...\nDatabase registered successfully.',
            'TFSConfig.exe CreateTeamProjectCollection /name:DefaultCollection /dbname:AzureDevOpsServer_DefaultCollection': 'Creating team project collection...\nTeam project collection created successfully.',
            'TFSConfig.exe Accounts /add /accountType:ApplicationTier /account:"NT AUTHORITY\\NETWORK SERVICE"': 'Adding account...\nAccount added successfully.',
          },
        },
      },
    ],
  },
  {
    id: 3,
    title: 'Global Permissions Configuration',
    description: 'Master the Azure DevOps permission hierarchy and global security settings',
    icon: 'üõ°Ô∏è',
    difficulty: 'medium',
    estimatedTime: 20,
    prerequisites: [2],
    badge: BADGES[2],
    challenges: [
      {
        id: 'permissions-quiz-1',
        type: 'quiz',
        title: 'Permission Levels',
        description: 'Understand the Azure DevOps permission hierarchy',
        points: 100,
        data: {
          question: 'What is the correct order of Azure DevOps permission levels from highest to lowest?',
          options: [
            'Server ‚Üí Collection ‚Üí Project ‚Üí Object',
            'Collection ‚Üí Server ‚Üí Project ‚Üí Object',
            'Project ‚Üí Collection ‚Üí Server ‚Üí Object',
            'Server ‚Üí Project ‚Üí Collection ‚Üí Object',
          ],
          correctAnswer: 0,
          explanation: 'The permission hierarchy is Server (highest) ‚Üí Collection ‚Üí Project ‚Üí Object (lowest). Higher levels can override lower level permissions.',
        },
      },
      {
        id: 'permissions-role-assignment-1',
        type: 'role-assignment',
        title: 'Assign Global Permissions',
        description: 'Assign the correct permissions to different user roles',
        points: 250,
        data: {
          instruction: 'Assign the appropriate global permissions to each user role:',
          characters: [
            {
              id: 'admin',
              name: 'Sarah Admin',
              role: 'System Administrator',
              avatar: 'üë©‚Äçüíº',
              description: 'Responsible for server maintenance and global configuration',
            },
            {
              id: 'dev',
              name: 'John Developer',
              role: 'Senior Developer',
              avatar: 'üë®‚Äçüíª',
              description: 'Develops and maintains application code',
            },
            {
              id: 'tester',
              name: 'Alice Tester',
              role: 'QA Engineer',
              avatar: 'üë©‚Äçüî¨',
              description: 'Creates and executes test plans',
            },
            {
              id: 'guest',
              name: 'Bob Guest',
              role: 'External Consultant',
              avatar: 'üë§',
              description: 'Limited access for consultation purposes',
            },
          ],
          permissions: [
            {
              id: 'administer-server',
              name: 'Administer Server',
              description: 'Full server administration rights',
              category: 'server',
              service: 'global',
            },
            {
              id: 'create-projects',
              name: 'Create Team Projects',
              description: 'Can create new team projects',
              category: 'collection',
              service: 'global',
            },
            {
              id: 'view-server-info',
              name: 'View Server Information',
              description: 'Can view server status and information',
              category: 'server',
              service: 'global',
            },
            {
              id: 'access-projects',
              name: 'Access Team Projects',
              description: 'Basic access to team projects',
              category: 'project',
              service: 'global',
            },
          ],
          correctAssignments: {
            'admin': ['administer-server', 'create-projects', 'view-server-info', 'access-projects'],
            'dev': ['create-projects', 'view-server-info', 'access-projects'],
            'tester': ['view-server-info', 'access-projects'],
            'guest': ['access-projects'],
          },
        },
      },
      {
        id: 'ado-users-quiz-1',
        type: 'quiz',
        title: 'User Management',
        description: 'Understand user management in Azure DevOps Server',
        points: 100,
        data: {
          question: 'How does Azure DevOps Server manage users?',
          options: [
            'It allows creating user accounts directly in Azure DevOps Server',
            'It only uses Microsoft accounts (Azure AD)',
            'It relies on existing users from Active Directory or local Windows server users',
            'It automatically creates users during installation'
          ],
          correctAnswer: 2,
          explanation: 'Azure DevOps Server does not allow creating internal user accounts. It relies on existing users from Active Directory or local accounts on the Windows server, which are then added to projects or groups in Azure DevOps.',
        },
      },
    ],
  },
  {
    id: 4,
    title: 'Service-Specific Permissions',
    description: 'Configure permissions for Azure Boards, Repos, Pipelines, Test Plans, and Artifacts',
    icon: '‚öôÔ∏è',
    difficulty: 'hard',
    estimatedTime: 30,
    prerequisites: [3],
    badge: BADGES[3],
    challenges: [
      {
        id: 'services-quiz-1',
        type: 'quiz',
        title: 'Service Permissions',
        description: 'Test your knowledge of service-specific permissions',
        points: 100,
        data: {
          question: 'Which permission is required to create and manage build pipelines?',
          options: ['Edit build pipeline', 'Administer build permissions', 'Queue builds', 'View build definition'],
          correctAnswer: 0,
          explanation: 'The "Edit build pipeline" permission allows users to create, modify, and manage build pipeline definitions.',
        },
      },
      {
        id: 'services-role-assignment-1',
        type: 'role-assignment',
        title: 'Azure Repos Permissions',
        description: 'Configure Git repository permissions for different roles',
        points: 200,
        data: {
          instruction: 'Assign appropriate Azure Repos permissions:',
          characters: [
            {
              id: 'lead-dev',
              name: 'Emma Lead',
              role: 'Development Lead',
              avatar: 'üë©‚Äçüíº',
              description: 'Leads the development team and manages repositories',
            },
            {
              id: 'junior-dev',
              name: 'Mike Junior',
              role: 'Junior Developer',
              avatar: 'üë®‚Äçüíª',
              description: 'New team member learning the codebase',
            },
          ],
          permissions: [
            {
              id: 'contribute',
              name: 'Contribute',
              description: 'Push code changes to the repository',
              category: 'project',
              service: 'repos',
            },
            {
              id: 'force-push',
              name: 'Force Push',
              description: 'Force push changes (rewrite history)',
              category: 'project',
              service: 'repos',
            },
            {
              id: 'manage-permissions',
              name: 'Manage Permissions',
              description: 'Manage repository permissions',
              category: 'project',
              service: 'repos',
            },
            {
              id: 'create-branch',
              name: 'Create Branch',
              description: 'Create new branches',
              category: 'project',
              service: 'repos',
            },
          ],
          correctAssignments: {
            'lead-dev': ['contribute', 'force-push', 'manage-permissions', 'create-branch'],
            'junior-dev': ['contribute', 'create-branch'],
          },
        },
      },
      {
        id: 'services-role-assignment-2',
        type: 'role-assignment',
        title: 'Azure Pipelines Permissions',
        description: 'Configure CI/CD pipeline permissions',
        points: 200,
        data: {
          instruction: 'Assign appropriate Azure Pipelines permissions:',
          characters: [
            {
              id: 'devops-eng',
              name: 'Carlos DevOps',
              role: 'DevOps Engineer',
              avatar: 'üë®‚Äçüîß',
              description: 'Manages CI/CD pipelines and deployments',
            },
            {
              id: 'developer',
              name: 'Lisa Dev',
              role: 'Developer',
              avatar: 'üë©‚Äçüíª',
              description: 'Develops features and fixes bugs',
            },
          ],
          permissions: [
            {
              id: 'edit-pipeline',
              name: 'Edit Build Pipeline',
              description: 'Create and modify build pipelines',
              category: 'project',
              service: 'pipelines',
            },
            {
              id: 'queue-builds',
              name: 'Queue Builds',
              description: 'Trigger build executions',
              category: 'project',
              service: 'pipelines',
            },
            {
              id: 'manage-queue',
              name: 'Manage Build Queue',
              description: 'Manage build queue and agents',
              category: 'project',
              service: 'pipelines',
            },
            {
              id: 'view-builds',
              name: 'View Builds',
              description: 'View build results and logs',
              category: 'project',
              service: 'pipelines',
            },
          ],
          correctAssignments: {
            'devops-eng': ['edit-pipeline', 'queue-builds', 'manage-queue', 'view-builds'],
            'developer': ['queue-builds', 'view-builds'],
          },
        },
      },
    ],
  },
  {
    id: 5,
    title: 'Final Challenge: Complete Project Setup',
    description: 'Put it all together by configuring a complete Azure DevOps project with all services',
    icon: 'üèÜ',
    difficulty: 'hard',
    estimatedTime: 35,
    prerequisites: [4],
    badge: BADGES[4],
    challenges: [
      {
        id: 'final-quiz-1',
        type: 'quiz',
        title: 'Integration Knowledge',
        description: 'Test your comprehensive understanding',
        points: 150,
        data: {
          question: 'What happens when you complete a successful CI/CD pipeline in Azure DevOps?',
          options: [
            'Code is automatically deployed to production',
            'Artifacts are created and can be deployed to configured environments',
            'All team members receive email notifications',
            'The repository is automatically backed up',
          ],
          correctAnswer: 1,
          explanation: 'A successful CI/CD pipeline creates deployable artifacts that can then be deployed to configured environments through release pipelines.',
        },
      },
      {
        id: 'ado-backup-quiz-1',
        type: 'quiz',
        title: 'Full Backup Requirements',
        description: 'Understand what is required to configure full backups in Azure DevOps Server',
        points: 100,
        data: {
          question: 'What is the primary requirement before configuring a full backup of Azure DevOps Server using the Administration Console?',
          options: [
            'A network shared folder accessible by the backup account',
            'MySQL server must be installed and configured',
            'A service connection to Azure Blob Storage must exist',
            'IIS Application Pool must run under LocalSystem account'
          ],
          correctAnswer: 0,
          explanation: 'To configure a full backup plan in Azure DevOps Server, you must provide a network shared folder where backup files will be stored. The service account used must have read/write access to that share.',
        },
      },
      {
        id: 'ado-collection-delete-quiz-1',
        type: 'quiz',
        title: 'Deleting a Collection',
        description: 'Understand the correct steps when deleting a collection in Azure DevOps Server',
        points: 100,
        data: {
          question: 'What is the correct order to delete a collection in Azure DevOps Server?',
          options: [
            'Select collection ‚Üí Stop it ‚Üí Detach it',
            'Detach collection ‚Üí Stop it ‚Üí Select it',
            'Stop collection ‚Üí Delete SQL Database ‚Üí Detach it',
            'Select collection ‚Üí Detach it ‚Üí Stop it'
          ],
          correctAnswer: 0,
          explanation: 'To properly delete a collection, you first select it, then stop it to prevent usage, and finally detach it. Optionally, you may delete the database from SQL Server if you want to permanently remove it.',
        },
      },
      {
        id: 'final-terminal-1',
        type: 'terminal',
        title: 'Complete Project Configuration',
        description: 'Execute the final configuration commands',
        points: 300,
        data: {
          instruction: 'Complete the project setup with these final commands:',
          expectedCommands: [
            'TFSConfig.exe CreateTeamProject /collection:DefaultCollection /name:"MyFirstProject" /template:"Agile"',
            'TFSConfig.exe Permissions /allow:Contribute /group:"[MyFirstProject]\\Contributors" /collection:DefaultCollection',
            'TFSConfig.exe Settings /set:EnableBasicAuth=true',
          ],
          hints: [
            'Create a new team project using the Agile template',
            'Set up contributor permissions for the project',
            'Enable basic authentication for external tools',
          ],
          simulatedOutput: {
            'TFSConfig.exe CreateTeamProject /collection:DefaultCollection /name:"MyFirstProject" /template:"Agile"': 'Creating team project...\nTeam project "MyFirstProject" created successfully.',
            'TFSConfig.exe Permissions /allow:Contribute /group:"[MyFirstProject]\\Contributors" /collection:DefaultCollection': 'Setting permissions...\nPermissions configured successfully.',
            'TFSConfig.exe Settings /set:EnableBasicAuth=true': 'Updating settings...\nBasic authentication enabled.',
          },
        },
      },
    ],
  },
];
